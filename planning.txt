üìÜ Semaine 1 : Configuration & D√©veloppement de la premi√®re partie (Gestion de la liste de produits)
Objectifs :
Configurer l'environnement de travail.
D√©velopper l'application de base pour permettre la gestion de la liste de produits.

Jour 1 : Configuration de l'environnement
Installer Python et les biblioth√®ques n√©cessaires.
Configurer le projet avec Git.
Installer Docker pour la containerisation future.
T√¢ches :

Initialiser le projet avec git init.
Configurer un environnement virtuel.
Planifier la structure du projet avec des dossiers clairs.

Jour 2 : D√©velopper le module de gestion des produits
D√©velopper une fonctionnalit√© pour permettre √† l'utilisateur de charger une liste de produits depuis un fichier texte.
T√¢ches :

√âcrire un module pour la lecture et le traitement de fichiers texte.
Impl√©menter la logique pour ajouter, rechercher et trier des produits.

Jour 3 : Interface en ligne de commande (CLI) - partie 1
D√©velopper une interface simple pour que l'utilisateur interagisse avec la liste de produits.
T√¢ches :

Impl√©menter un menu avec des commandes simples.
Ajouter un produit.
Rechercher un produit.
Trier la liste de produits.

Jour 4 : Tests & Optimisations
√âcrire des tests simples pour valider les fonctionnalit√©s de base.
Optimiser le code et s'assurer qu'il est clair et modulaire.

Jour 5 : Dockerisation de l'application
Pr√©parer l'environnement pour permettre la containerisation.
T√¢ches :

√âcrire un Dockerfile.
Construire et ex√©cuter l'application avec Docker.
Tester pour s'assurer que tout fonctionne correctement dans le conteneur.
Objectifs fin de semaine 1 :
Le module de gestion de produits doit √™tre fonctionnel.
L'interface en ligne de commande doit permettre les op√©rations basiques.
Docker doit √™tre configur√©.



üìÜ Semaine 2 : Int√©gration de la base de donn√©es & D√©veloppement de la s√©curit√©
Objectifs :
Int√©grer une base de donn√©es pour g√©rer plusieurs commer√ßants.
Ajouter la s√©curit√© avec un suivi des mots de passe compromis.
D√©velopper une logique pour la d√©tection de failles de s√©curit√©.


Jour 1-2 : Configuration de la base de donn√©es
D√©finir la structure de la base de donn√©es avec CSV.
Permettre l'ajout et la r√©cup√©ration d'utilisateurs et leurs mots de passe.
T√¢ches :

D√©velopper des fonctions pour interagir avec la base CSV.
Impl√©menter la logique pour v√©rifier les mots de passe.



Jour 3 : S√©curit√© & API pour la d√©tection de mots de passe compromis
Int√©grer une API pour la d√©tection de mots de passe compromis.
Proposer des alertes pour les utilisateurs avec mots de passe faibles ou compromis.
T√¢ches :

Explorer une API existante pour la d√©tection de failles de s√©curit√© (par exemple, Have I Been Pwned).
Int√©grer l'API dans l'application.
Jour 4 : Interface utilisateur avec Tkinter/PyQt
D√©velopper une interface simple avec Tkinter ou PyQt.
T√¢ches :

D√©velopper les √©l√©ments de l'interface utilisateur.
Fen√™tre principale avec authentification.
Vue pour la gestion de produits.


Jour 5 : Tests de l'int√©gration & S√©curit√©
Tester l'int√©gration des fonctionnalit√©s de base avec la base de donn√©es.
Simuler des sc√©narios avec mots de passe compromis pour valider l'API.
Objectifs fin de semaine 2 :
Base de donn√©es avec gestion multi-utilisateur.
S√©curit√© avec d√©tection de mots de passe compromis.
Une premi√®re version de l'interface utilisateur avec un syst√®me d'authentification.


üìÜ Semaine 3 : Statistiques, commandes & Interface graphique
Objectifs :
Permettre l'affichage des statistiques.
Int√©grer la possibilit√© de recevoir des commandes.
Finaliser l'interface utilisateur.
Finaliser la dockerisation.


Jour 1-2 : Int√©grer des statistiques avec Matplotlib/Seaborn
Ajouter des statistiques des donn√©es (ex : nombre de produits, utilisateurs actifs, ventes).
T√¢ches :

Analyser les donn√©es avec Pandas.
G√©n√©rer des graphiques avec Matplotlib ou Seaborn.
Jour 3 : Permettre √† l'application de recevoir des commandes
D√©velopper la logique pour que l'API puisse permettre l'envoi/r√©ception de commandes.
T√¢ches :

√âtendre la base de donn√©es pour permettre l'enregistrement des commandes.
Tester les commandes avec l'API.
Jour 4 : Finaliser l'interface graphique
Ajouter toutes les fonctionnalit√©s n√©cessaires dans l'interface graphique.
T√¢ches :

Interface avec connexion utilisateur.
Vue avec la liste des produits.
Vue pour la gestion des commandes.
Vue pour l'affichage des statistiques.
Jour 5 : Tests finaux & Dockerisation
Tester toutes les fonctionnalit√©s de bout en bout.
S'assurer que Docker fonctionne correctement avec toutes les nouvelles fonctionnalit√©s.
Objectifs fin de semaine 3 :
L'application doit √™tre enti√®rement fonctionnelle avec une base de donn√©es s√©curis√©e.
L'interface doit √™tre ergonomique et simple d'utilisation.
Les statistiques et commandes doivent √™tre int√©gr√©es avec succ√®s.
Docker doit √™tre configur√© et pr√™t pour le d√©ploiement.
üöÄ Livrables attendus :
Application de gestion de produits avec gestion multi-utilisateur via base de donn√©es CSV.
Interface utilisateur avec authentification.
Syst√®me de d√©tection de failles de s√©curit√© avec API.
Fonctionnalit√© d'affichage des statistiques avec Matplotlib/Seaborn.
Gestion des commandes avec API.
Dockerisation de l'application.
Utilisation de Git pour la gestion des versions.
üìå Outils utilis√©s :
Langage : Python
Base de donn√©es : Fichier CSV local
S√©curit√© : API externe pour la d√©tection de mots de passe compromis
Graphiques : Matplotlib ou Seaborn
Interface : Tkinter ou PyQt
Containerisation : Docker
Gestion de versions : Git
Ce planning est une feuille de route pour rester organis√© sur 3 semaines tout en s'assurant que chaque fonctionnalit√© est bien int√©gr√©e et test√©e √† chaque √©tape. Si certaines t√¢ches avancent plus vite ou n√©cessitent plus de temps, n'h√©sitez pas √† ajuster le calendrier !